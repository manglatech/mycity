/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/domain/ModelTest.e.vm.java
 */
package com.mgt.mycity.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.mgt.mycity.util.*;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.validator.constraints.NotEmpty;
import com.mgt.mycity.validation.JpaUnique;

/**
 * Basic tests for Role
 */
public class RoleTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Role model = new Role();
        assertFalse(model.isPrimaryKeySet());
    }

    @Test
    public void isPrimaryKeySetReturnsTrue() {
        Role model = new Role();
        model.setRoleId(ValueGenerator.getUniqueNumeric(Integer.class, "2147483647"));
        assertNotNull(model.getRoleId());
        assertTrue(model.isPrimaryKeySet());
    }

    // test columns methods

    @Test
    public void toStringNotNull() {
        Role model = new Role();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        Role model1 = new Role();
        Role model2 = new Role();

        model1.setRoleName("d");
        model2.setRoleName("d");

        Integer roleId = ValueGenerator.getUniqueNumeric(Integer.class, "2147483647");
        model1.setRoleId(roleId);
        model2.setRoleId(roleId);
        assertTrue(model1.isPrimaryKeySet());
        assertTrue(model2.isPrimaryKeySet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}