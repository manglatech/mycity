/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/test/java/domain/ModelTest.e.vm.java
 */
package com.mgt.mycity.domain;

import java.io.*;
import java.util.*;

import static org.junit.Assert.*;
import org.junit.Test;

import com.mgt.mycity.util.*;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static javax.persistence.TemporalType.TIMESTAMP;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import static com.mgt.mycity.util.ResourcesUtil.DATE_FORMAT_PATTERN;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.validator.constraints.NotEmpty;
import org.springframework.format.annotation.DateTimeFormat;
import com.mgt.mycity.domain.Category;
import com.mgt.mycity.domain.Photo;
import com.mgt.mycity.validation.JpaUnique;

/**
 * Basic tests for Restaurent
 */
public class RestaurentTest {

    // test unique primary key
    @Test
    public void newInstanceHasNoPrimaryKey() {
        Restaurent model = new Restaurent();
        assertFalse(model.isPrimaryKeySet());
    }

    @Test
    public void isPrimaryKeySetReturnsTrue() {
        Restaurent model = new Restaurent();
        model.setRestaurentId(ValueGenerator.getUniqueNumeric(Integer.class, "2147483647"));
        assertNotNull(model.getRestaurentId());
        assertTrue(model.isPrimaryKeySet());
    }

    // test columns methods

    //-------------------------------------------------------------
    // Many to One:  Restaurent.photoId ==> Photo.id
    //-------------------------------------------------------------

    @Test
    public void manyToOne_setPhoto() {
        Restaurent many = new Restaurent();

        // init
        Photo one = new Photo();

        one.setId(ValueGenerator.getUniqueNumeric(Integer.class, "2147483647"));
        many.setPhoto(one);

        // make sure it is propagated properly
        assertNotNull(many.getPhotoId());
        assertEquals(one, many.getPhoto());
        assertSame(many.getPhotoId(), one.getId());
        // now set it to back to null
        many.setPhoto(null);

        // make sure null is propagated properly
        assertNull(many.getPhoto());

        // make sure it is propagated on fk column as well
        assertNull(many.getPhotoId());
    }

    //-------------------------------------------------------------
    // Pure Many to Many
    //-------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Test
    public void manyToMany_addCategory() {
        Restaurent many1 = new Restaurent();
        Category many2 = new Category();

        // add it
        many1.addCategory(many2);

        // check it is propagated
        assertTrue(many1.containsCategory(many2));
        // now let's remove it
        many1.removeCategory(many2);

        // check it is propagated
        assertFalse(many1.containsCategory(many2));
    }

    @Test
    public void toStringNotNull() {
        Restaurent model = new Restaurent();
        assertNotNull(model.toString());
    }

    @Test
    public void equalsUsingPk() {
        Restaurent model1 = new Restaurent();
        Restaurent model2 = new Restaurent();

        Integer restaurentId = ValueGenerator.getUniqueNumeric(Integer.class, "2147483647");
        model1.setRestaurentId(restaurentId);
        model2.setRestaurentId(restaurentId);

        model1.setCode("d");
        model2.setCode("d");

        model1.setName("d");
        model2.setName("d");

        model1.setDesc("d");
        model2.setDesc("d");

        model1.setIsActive("d");
        model2.setIsActive("d");

        model1.setCreatedDate(new Date());
        model2.setCreatedDate(new Date());

        model1.setCreatedBy("d");
        model2.setCreatedBy("d");

        model1.setModifiedBy(new Date());
        model2.setModifiedBy(new Date());

        model1.setModifiedDate("d");
        model2.setModifiedDate("d");
        assertTrue(model1.isPrimaryKeySet());
        assertTrue(model2.isPrimaryKeySet());
        assertTrue(model1.hashCode() == model2.hashCode());
        assertTrue(model1.equals(model2));
        assertTrue(model2.equals(model1));
    }
}