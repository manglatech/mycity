/*
 * (c) Copyright 2005-2012 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-mvc-3:src/main/java/web/context/AccountContextSupport.p.vm.java
 */
package com.mgt.mycity.web.context;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import org.apache.log4j.Logger;

import com.mgt.mycity.context.AccountContext;
import com.mgt.mycity.context.LogContext;
import com.mgt.mycity.dao.support.SearchTemplate;
import com.mgt.mycity.security.SpringSecurityContext;

import com.mgt.mycity.domain.User;
import com.mgt.mycity.service.UserService;

@Component
public class AccountContextSupport {
    private static final Logger log = Logger.getLogger(AccountContextSupport.class);

    private UserService userService;

    @Autowired
    public AccountContextSupport(UserService userService) {
        this.userService = userService;
    }

    /**
     * Set up the LogContext and the AccountContext on the current thread.
     * Should be invoked once, e.g from your web filter or interceptor.
     * Do not forget to call the resetContext method when you are done
     * with the request.
     */
    public void processAccountContext(HttpServletRequest req) {
        String username = SpringSecurityContext.getUsername();

        // set up log context for this thread so these information can be used by log4j
        LogContext.setLogin(username != null ? username : "no username");
        LogContext.setSessionId(req.getSession().getId());

        // set up the account context
        AccountContext accountContext = new AccountContext();
        AccountContext.setAccountContext(accountContext);
        accountContext.setSessionId(req.getSession().getId());
        accountContext.setRoles(SpringSecurityContext.getRoles());

        if (SpringSecurityContext.getUserDetails() != null) {
            // load the account from the database.
            // we assume here that the second level cache is used,
            // otherwise we would hit the database at each request.
            User account = new User();
            account.setEmailaddress(username);

            SearchTemplate searchTemplate = new SearchTemplate().setCaseSensitive(false);
            account = userService.findUniqueOrNone(account, searchTemplate);

            if (account != null) {
                // set up account context for this thread
                accountContext.setAccount(account);
                accountContext.setUsername(account.getEmailaddress());
            }
        } else if (log.isDebugEnabled()) {
            log.debug("No user details");
        }
    }

    /**
     * Reset the account context and the log context from the current thread.
     */
    public void resetContext() {
        AccountContext.resetAccountContext();
        LogContext.resetLogContext();
    }
}